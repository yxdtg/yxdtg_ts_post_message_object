{"version":3,"sources":["../../src/index.ts","../../src/tests/define.ts","../../src/tests/window1.ts"],"sourcesContent":["interface IPostMessageObjectOptions {\r\n    currentWindow: Window;\r\n    targetOrigin?: string;\r\n}\r\n\r\ninterface IMessageInfo {\r\n    id: string;\r\n    type: string;\r\n    data: any;\r\n}\r\n\r\ninterface IMessageCallbackObject<\r\n    M extends Record<keyof M, any> = any,\r\n    T extends keyof M = any,\r\n> {\r\n    type: T;\r\n    callback: IMessageCallback<M, T>;\r\n    target: any;\r\n}\r\n\r\ntype IMessageResponseCallback<\r\n    M extends Record<keyof M, any> = any,\r\n    T extends keyof M = any,\r\n> = (returnValue: ReturnType<M[T]>) => void;\r\n\r\ntype IMessageCallback<\r\n    M extends Record<keyof M, any> = any,\r\n    T extends keyof M = any,\r\n> = (\r\n    response: IMessageResponseCallback<M, T>,\r\n    ...data: Parameters<M[T]>\r\n) => void;\r\n\r\nexport class PostMessageObject<M extends Record<keyof M, any> = any> {\r\n    private _messageId: number = 0;\r\n    private _generateMessageId(): string {\r\n        const messageId = ++this._messageId;\r\n        return `messageId_${messageId}`;\r\n    }\r\n    private _getResponseMessageId(messageId: string): string {\r\n        return `_response_${messageId}`;\r\n    }\r\n\r\n    private _messageCallbackObjectsMap: Map<\r\n        keyof M,\r\n        IMessageCallbackObject<M, keyof M>[]\r\n    > = new Map();\r\n    private _responseCallbackMap: Map<string, IMessageResponseCallback> =\r\n        new Map();\r\n\r\n    private _onAllMessageHandler: (event: MessageEvent) => void;\r\n\r\n    private _currentWindow: Window;\r\n    private _targetOrigin: string;\r\n    constructor(options: IPostMessageObjectOptions) {\r\n        this._currentWindow = options.currentWindow;\r\n        this._targetOrigin = options.targetOrigin ?? \"*\";\r\n\r\n        this._onAllMessageHandler = this._onAllMessage.bind(this);\r\n        this._currentWindow.addEventListener(\r\n            \"message\",\r\n            this._onAllMessageHandler,\r\n        );\r\n    }\r\n    private _onAllMessage(event: MessageEvent): void {\r\n        // console.log(event.data);\r\n        if (typeof event.data !== \"string\") return;\r\n        const message: string = event.data;\r\n        if (message.substring(0, 17) !== `{\"id\":\"messageId_`) return;\r\n\r\n        const targetWindow = event.source as Window;\r\n        const messageInfo: IMessageInfo = JSON.parse(message);\r\n        this._triggerMessageCallback(targetWindow, messageInfo);\r\n    }\r\n\r\n    /**\r\n     * 发送消息并等待响应\r\n     * @param targetWindow 目标窗口\r\n     * @param type 消息类型\r\n     * @param data 消息参数 可多个\r\n     * @returns 响应参数\r\n     */\r\n    public async send<T extends keyof M>(\r\n        targetWindow: Window,\r\n        type: T,\r\n        ...data: Parameters<M[T]>\r\n    ): Promise<ReturnType<M[T]>> {\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                const messageInfo = this._send(targetWindow, type, ...data);\r\n\r\n                const responseMessageId = this._getResponseMessageId(\r\n                    messageInfo.id,\r\n                );\r\n                const responseCallback: IMessageResponseCallback = (\r\n                    returnValue: any,\r\n                ): void => {\r\n                    resolve(returnValue);\r\n                    this._responseCallbackMap.delete(responseMessageId);\r\n                };\r\n                this._responseCallbackMap.set(\r\n                    responseMessageId,\r\n                    responseCallback,\r\n                );\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    }\r\n    private _send<T extends keyof M>(\r\n        targetWindow: Window,\r\n        type: T,\r\n        ...data: Parameters<M[T]>\r\n    ): IMessageInfo {\r\n        const messageInfo: IMessageInfo = {\r\n            id: this._generateMessageId(),\r\n            type: type as any,\r\n            data: data,\r\n        };\r\n\r\n        const message = JSON.stringify(messageInfo);\r\n        targetWindow.postMessage(message, this._targetOrigin);\r\n\r\n        return messageInfo;\r\n    }\r\n\r\n    /**\r\n     * 接收信息\r\n     * @param type 消息类型\r\n     * @param callback 消息回调\r\n     * @param target 回调this指向\r\n     */\r\n    public receive<T extends keyof M>(\r\n        type: T,\r\n        callback: IMessageCallback<M, T>,\r\n        target: any = null,\r\n    ): void {\r\n        const messageCallbackObject: IMessageCallbackObject = {\r\n            type: type,\r\n            callback: callback,\r\n            target: target,\r\n        };\r\n\r\n        const messageCallbackObjects =\r\n            this._messageCallbackObjectsMap.get(type) ?? [];\r\n        messageCallbackObjects.push(messageCallbackObject);\r\n\r\n        this._messageCallbackObjectsMap.set(type, messageCallbackObjects);\r\n    }\r\n    private _triggerMessageCallback(\r\n        targetWindow: Window,\r\n        messageInfo: IMessageInfo,\r\n    ): void {\r\n        const messageInfoType = messageInfo.type;\r\n        // 响应消息类型\r\n        if (messageInfoType.substring(0, 10) === \"_response_\") {\r\n            const responseMessageId = messageInfo.type;\r\n            const responseCallback =\r\n                this._responseCallbackMap.get(responseMessageId);\r\n\r\n            if (responseCallback) {\r\n                responseCallback(messageInfo.data[0] ?? undefined);\r\n            }\r\n        } else {\r\n            // 普通消息类型\r\n            const responseCallback: IMessageResponseCallback = (\r\n                returnValue: any,\r\n            ): void => {\r\n                const responseMessageId = this._getResponseMessageId(\r\n                    messageInfo.id,\r\n                );\r\n                (this._send as any)(\r\n                    targetWindow,\r\n                    responseMessageId as any,\r\n                    returnValue as any,\r\n                );\r\n            };\r\n\r\n            const messageCallbackObjects =\r\n                this._messageCallbackObjectsMap.get(messageInfo.type as any) ??\r\n                [];\r\n\r\n            for (const messageCallbackObject of messageCallbackObjects) {\r\n                if (messageCallbackObject.target) {\r\n                    messageCallbackObject.callback.call(\r\n                        messageCallbackObject.target,\r\n                        responseCallback,\r\n                        ...messageInfo.data,\r\n                    );\r\n                } else {\r\n                    messageCallbackObject.callback(\r\n                        responseCallback,\r\n                        ...messageInfo.data,\r\n                    );\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 注销消息接收\r\n     * @param type 消息类型\r\n     * @param callback 消息回调\r\n     * @param target 回调this指向\r\n     * @returns\r\n     */\r\n    public unReceive<T extends keyof M>(\r\n        type: T,\r\n        callback: IMessageCallback<M, T>,\r\n        target: any = null,\r\n    ): void {\r\n        const messageCallbackObjects =\r\n            this._messageCallbackObjectsMap.get(type) ?? [];\r\n        if (messageCallbackObjects.length === 0) return;\r\n\r\n        const index = messageCallbackObjects.findIndex(\r\n            (messageCallbackObject) =>\r\n                messageCallbackObject.callback === callback &&\r\n                messageCallbackObject.target === target,\r\n        );\r\n        if (index === -1) return;\r\n\r\n        messageCallbackObjects.splice(index, 1);\r\n    }\r\n    /**\r\n     * 注销所有消息接收\r\n     */\r\n    public unAllReceives(): void {\r\n        this._messageCallbackObjectsMap.clear();\r\n    }\r\n    /**\r\n     * 清理所有响应回调\r\n     */\r\n    public clearAllResponseCallbacks(): void {\r\n        this._responseCallbackMap.clear();\r\n    }\r\n\r\n    /**\r\n     * 清理该对象\r\n     */\r\n    public close(): void {\r\n        window.removeEventListener(\"message\", this._onAllMessageHandler);\r\n    }\r\n}\r\n","export const MessageType = {\r\n    GET_RANDOM_NUMBER: \"get_random_number\",\r\n    GET_RANDOM_STRING: \"get_random_string\",\r\n} as const;\r\nexport type MessageType = (typeof MessageType)[keyof typeof MessageType];\r\n\r\nexport interface IMessageTypeMap {\r\n    [MessageType.GET_RANDOM_NUMBER]: () => number;\r\n    [MessageType.GET_RANDOM_STRING]: (length: number) => string;\r\n}\r\n","import { PostMessageObject } from \"../index\";\r\nimport { IMessageTypeMap, MessageType } from \"./define\";\r\n\r\nconst call = (): void => {\r\n    const window2IFrame = window.parent.document.querySelector(\r\n        \"#window2_iframe\",\r\n    ) as HTMLIFrameElement;\r\n    if (!window2IFrame) throw new Error(\"window2IFrame is null\");\r\n    const window2 = window2IFrame.contentWindow;\r\n    if (!window2) throw new Error(\"window2 is null\");\r\n\r\n    const messageTextEl = document.querySelector(\r\n        \"#message_text\",\r\n    ) as HTMLElement;\r\n    if (!messageTextEl) throw new Error(\"messageTextEl is null\");\r\n\r\n    const postMessageObject = new PostMessageObject<IMessageTypeMap>({\r\n        currentWindow: window,\r\n    });\r\n\r\n    postMessageObject.receive(MessageType.GET_RANDOM_NUMBER, (response) => {\r\n        messageTextEl.textContent = `收到来自window2页面的消息-获取随机数字`;\r\n\r\n        const randomNumber = Math.floor(Math.random() * 101);\r\n        response(randomNumber);\r\n    });\r\n\r\n    (window as any).sendGetRandomString = (): void => {\r\n        postMessageObject\r\n            .send(window2, MessageType.GET_RANDOM_STRING, 12)\r\n            .then((randomString) => {\r\n                messageTextEl.textContent = `响应来自window2页面的消息-获取随机字符串: ${randomString}`;\r\n            });\r\n    };\r\n};\r\n\r\nrequestAnimationFrame(call);\r\n"],"mappings":"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","names":[]}